Extension { #name : #CollectionTest }

{ #category : #'*Containers-LinkedStoragePool-Tests' }
CollectionTest >> assert_testTopologicalSortOnCycleDo3_edgesEqualsTo: edges [

	self assert: edges equals: { 
			(100 -> 96).
			(97 -> 96).
			(91 -> 96).
			(88 -> 96).
			(96 -> 90).
			(90 -> 95).
			(80 -> 95).
			(78 -> 95).
			(61 -> 95).
			(51 -> 95).
			(41 -> 95).
			(13 -> 95).
			(10 -> 95).
			(4 -> 95).
			(89 -> 90).
			(89 -> 90).
			(86 -> 90).
			(85 -> 90).
			(73 -> 90).
			(70 -> 90).
			(59 -> 90).
			(38 -> 90).
			(7 -> 90).
			(89 -> 82).
			(87 -> 82).
			(81 -> 82).
			(75 -> 82).
			(72 -> 82).
			(68 -> 82).
			(64 -> 82).
			(64 -> 82).
			(60 -> 82).
			(58 -> 82).
			(55 -> 82).
			(36 -> 82).
			(16 -> 82).
			(12 -> 82).
			(98 -> 99).
			(99 -> 85).
			(99 -> 85).
			(98 -> 85).
			(79 -> 85).
			(69 -> 85).
			(64 -> 85).
			(61 -> 85).
			(42 -> 85).
			(29 -> 85).
			(28 -> 85).
			(18 -> 85).
			(85 -> 78).
			(71 -> 78).
			(68 -> 78).
			(66 -> 78).
			(59 -> 78).
			(47 -> 78).
			(38 -> 78).
			(33 -> 78).
			(8 -> 78).
			(10 -> 85).
			(9 -> 85).
			(7 -> 85).
			(3 -> 85).
			(81 -> 99).
			(72 -> 99).
			(71 -> 99).
			(64 -> 99).
			(47 -> 99).
			(75 -> 94).
			(74 -> 94).
			(65 -> 94).
			(94 -> 70).
			(84 -> 70).
			(62 -> 70).
			(57 -> 70).
			(37 -> 70).
			(20 -> 70).
			(7 -> 70).
			(68 -> 62).
			(56 -> 62).
			(44 -> 62).
			(40 -> 62).
			(34 -> 62).
			(26 -> 62).
			(12 -> 62).
			(8 -> 62).
			(7 -> 62).
			(5 -> 62).
			(46 -> 99).
			(83 -> 96).
			(59 -> 96).
			(40 -> 96).
			(23 -> 96).
			(22 -> 96).
			(81 -> 98).
			(87 -> 92).
			(83 -> 92).
			(72 -> 92).
			(71 -> 92).
			(68 -> 92).
			(49 -> 92).
			(38 -> 92).
			(13 -> 92).
			(12 -> 92).
			(1 -> 92).
			(77 -> 98).
			(71 -> 98).
			(58 -> 98).
			(57 -> 98).
			(36 -> 98).
			(27 -> 98).
			(84 -> 89).
			(89 -> 73).
			(93 -> 80).
			(68 -> 73).
			(57 -> 73).
			(46 -> 73).
			(36 -> 73).
			(51 -> 97).
			(42 -> 97).
			(28 -> 97).
			(24 -> 97).
			(19 -> 97).
			(19 -> 97).
			(18 -> 97).
			(15 -> 97).
			(1 -> 97).
			(73 -> 89).
			(35 -> 89).
			(26 -> 89).
			(26 -> 89).
			(17 -> 89).
			(13 -> 89).
			(10 -> 89).
			(1 -> 89).
			(87 -> 80).
			(65 -> 80).
			(21 -> 80).
			(11 -> 80).
			(76 -> 77).
			(88 -> 71).
			(74 -> 84).
			(66 -> 84).
			(48 -> 84).
			(47 -> 84).
			(40 -> 84).
			(24 -> 84).
			(4 -> 84).
			(1 -> 84).
			(81 -> 71).
			(65 -> 71).
			(50 -> 71).
			(38 -> 71).
			(7 -> 71).
			(99 -> 100).
			(94 -> 100).
			(99 -> 81).
			(93 -> 81).
			(73 -> 81).
			(68 -> 81).
			(47 -> 81).
			(44 -> 81).
			(24 -> 81).
			(91 -> 76).
			(75 -> 76).
			(72 -> 76).
			(69 -> 76).
			(69 -> 76).
			(63 -> 76).
			(54 -> 76).
			(76 -> 55).
			(73 -> 55).
			(51 -> 55).
			(50 -> 55).
			(47 -> 55).
			(38 -> 55).
			(35 -> 55).
			(30 -> 55).
			(94 -> 46).
			(46 -> 77).
			(41 -> 77).
			(30 -> 77).
			(42 -> 99).
			(67 -> 75).
			(75 -> 87).
			(87 -> 93).
			(67 -> 93).
			(64 -> 93).
			(53 -> 93).
			(50 -> 93).
			(31 -> 93).
			(24 -> 93).
			(16 -> 93).
			(14 -> 93).
			(9 -> 93).
			(1 -> 93).
			(73 -> 91).
			(47 -> 91).
			(44 -> 91).
			(63 -> 74).
			(38 -> 74).
			(16 -> 74).
			(16 -> 74).
			(5 -> 74).
			(1 -> 74).
			(41 -> 91).
			(38 -> 91).
			(30 -> 73).
			(25 -> 73).
			(21 -> 73).
			(13 -> 73).
			(11 -> 73).
			(7 -> 73).
			(87 -> 64).
			(69 -> 64).
			(67 -> 64).
			(63 -> 64).
			(63 -> 64).
			(58 -> 64).
			(58 -> 64).
			(53 -> 64).
			(44 -> 64).
			(34 -> 64).
			(21 -> 64).
			(10 -> 64).
			(7 -> 64).
			(88 -> 68).
			(76 -> 68).
			(57 -> 68).
			(43 -> 68).
			(52 -> 39).
			(50 -> 39).
			(46 -> 39).
			(38 -> 39).
			(36 -> 39).
			(15 -> 39).
			(21 -> 91).
			(15 -> 91).
			(3 -> 91).
			(69 -> 87).
			(50 -> 87).
			(50 -> 87).
			(49 -> 87).
			(38 -> 87).
			(3 -> 87).
			(50 -> 76).
			(37 -> 35).
			(36 -> 35).
			(34 -> 35).
			(16 -> 35).
			(13 -> 35).
			(2 -> 35).
			(1 -> 35).
			(76 -> 83).
			(69 -> 83).
			(67 -> 83).
			(63 -> 86).
			(50 -> 86).
			(44 -> 86).
			(25 -> 86).
			(15 -> 86).
			(14 -> 86).
			(45 -> 75).
			(28 -> 75).
			(56 -> 88).
			(15 -> 88).
			(14 -> 88).
			(17 -> 77).
			(16 -> 77).
			(6 -> 77).
			(2 -> 77).
			(63 -> 72).
			(34 -> 72).
			(25 -> 72).
			(60 -> 67).
			(30 -> 67).
			(52 -> 28).
			(28 -> 67).
			(25 -> 67).
			(5 -> 67).
			(49 -> 83).
			(41 -> 83).
			(21 -> 83).
			(11 -> 83).
			(2 -> 83).
			(33 -> 76).
			(28 -> 68).
			(21 -> 68).
			(27 -> 59).
			(25 -> 76).
			(6 -> 76).
			(59 -> 65).
			(57 -> 65).
			(13 -> 48).
			(5 -> 48).
			(56 -> 32).
			(51 -> 32).
			(45 -> 32).
			(42 -> 32).
			(37 -> 32).
			(31 -> 32).
			(28 -> 32).
			(53 -> 20).
			(44 -> 20).
			(43 -> 20).
			(40 -> 20).
			(17 -> 20).
			(28 -> 65).
			(12 -> 65).
			(63 -> 66).
			(49 -> 66).
			(37 -> 66).
			(23 -> 59).
			(3 -> 59).
			(34 -> 66).
			(61 -> 60).
			(56 -> 60).
			(52 -> 60).
			(46 -> 60).
			(41 -> 60).
			(16 -> 60).
			(3 -> 60).
			(29 -> 41).
			(94 -> 57).
			(22 -> 57).
			(21 -> 57).
			(21 -> 57).
			(9 -> 57).
			(5 -> 57).
			(4 -> 57).
			(51 -> 69).
			(34 -> 69).
			(33 -> 69).
			(31 -> 69).
			(23 -> 69).
			(14 -> 69).
			(46 -> 30).
			(30 -> 66).
			(29 -> 66).
			(25 -> 66).
			(61 -> 58).
			(15 -> 58).
			(11 -> 58).
			(4 -> 58).
			(46 -> 37).
			(36 -> 37).
			(33 -> 37).
			(22 -> 37).
			(8 -> 37).
			(34 -> 54).
			(15 -> 33).
			(14 -> 33).
			(11 -> 33).
			(18 -> 32).
			(8 -> 32).
			(26 -> 54).
			(24 -> 54).
			(10 -> 54).
			(63 -> 43).
			(40 -> 43).
			(24 -> 41).
			(21 -> 41).
			(15 -> 41).
			(15 -> 41).
			(13 -> 41).
			(8 -> 41).
			(25 -> 46).
			(31 -> 43).
			(17 -> 43).
			(16 -> 43).
			(16 -> 43).
			(12 -> 43).
			(45 -> 16).
			(11 -> 16).
			(30 -> 1).
			(9 -> 1).
			(8 -> 1).
			(8 -> 1).
			(49 -> 45).
			(45 -> 44).
			(11 -> 44).
			(4 -> 44).
			(45 -> 28).
			(31 -> 28).
			(53 -> 52).
			(36 -> 52).
			(52 -> 13).
			(51 -> 13).
			(50 -> 13).
			(34 -> 40).
			(6 -> 40).
			(13 -> 52).
			(4 -> 50).
			(56 -> 27).
			(22 -> 27).
			(8 -> 27).
			(49 -> 6).
			(13 -> 6).
			(63 -> 2).
			(51 -> 2).
			(49 -> 2).
			(28 -> 2).
			(23 -> 2).
			(18 -> 22).
			(18 -> 22).
			(17 -> 22).
			(61 -> 42).
			(4 -> 42).
			(49 -> 19).
			(12 -> 18).
			(61 -> 4).
			(18 -> 19).
			(5 -> 19).
			(56 -> 11).
			(11 -> 4).
			(8 -> 31).
			(5 -> 24) }
]

{ #category : #'*Containers-LinkedStoragePool-Tests' }
CollectionTest >> randomRelationOfSize: size max: m [

	| random |
	random := Random seed: 7.
	^ (1 to: size)
		  collect: [ :k | 
			  | a b |
			  a := random nextInteger: m.
			  b := random nextInteger: m.
			  a -> (a = b
				   ifTrue: [ b + 1 \\ m max: 1 ]
				   ifFalse: [ b ]) ]
		  as: OrderedCollection
]

{ #category : #'*Containers-LinkedStoragePool-Tests' }
CollectionTest >> testTopologicalSortOnCycleDo [

	"The following test is kept from TAOCP by Donald Knuth, Volume 1 page 272."

	self
		assert: ((1 to: 9)
				 topologicalSortByAssociations: { 
						 (9 -> 2).
						 (3 -> 7).
						 (7 -> 5).
						 (5 -> 8).
						 (8 -> 6).
						 (4 -> 6).
						 (1 -> 3).
						 (7 -> 4).
						 (9 -> 5).
						 (2 -> 8) }
				 onCycleDo: [ Error signal ])
		equals: #( 1 3 7 4 9 2 5 8 6 )
]

{ #category : #'*Containers-LinkedStoragePool-Tests' }
CollectionTest >> testTopologicalSortOnCycleDo1 [

	"This test stress four small cycles detection."

	| cycleBlock |
	cycleBlock := [ :sequence :cycle | sequence , cycle ].
	self
		assert: ({ #a }
				 topologicalSortByAssociations: { (1 -> 1) }
				 onCycleDo: cycleBlock)
		equals: { 
				#a.
				#a.
				(1 -> 1) }.
	self
		assert: ({ #a. #b }
				 topologicalSortByAssociations: { 
						 (1 -> 2).
						 (2 -> 1) }
				 onCycleDo: cycleBlock)
		equals: { 
				#a.
				#b.
				#a.
				(1 -> 2).
				(2 -> 1) }.
	self
		assert: ({ #a. #b. #c }
				 topologicalSortByAssociations: { 
						 (1 -> 2).
						 (2 -> 3).
						 (3 -> 1) }
				 onCycleDo: cycleBlock)
		equals: { 
				#a.
				#b.
				#c.
				#a.
				(1 -> 2).
				(3 -> 1).
				(2 -> 3) }.
	self
		assert: ({ #a. #b. #c. #d. #e }
				 topologicalSortByAssociations: { 
						 (5 -> 1).
						 (1 -> 2).
						 (2 -> 3).
						 (3 -> 5).
						 (3 -> 4) }
				 onCycleDo: cycleBlock)
		equals: { 
				#c.
				#e.
				#a.
				#b.
				#c.
				(3 -> 5).
				(2 -> 3).
				(1 -> 2).
				(5 -> 1) }
]

{ #category : #'*Containers-LinkedStoragePool-Tests' }
CollectionTest >> testTopologicalSortOnCycleDo2 [

	"The following test is kept from https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg."

	self
		assert: ((1 to: 8)
				 topologicalSortByAssociations: { 
						 (1 -> 4).
						 (2 -> 4).
						 (2 -> 5).
						 (3 -> 5).
						 (3 -> 8).
						 (4 -> 6).
						 (4 -> 7).
						 (4 -> 8).
						 (5 -> 7) }
				 onCycleDo: [ Error signal ])
		equals: #( 1 2 4 6 3 5 7 8 )
]

{ #category : #'*Containers-LinkedStoragePool-Tests' }
CollectionTest >> testTopologicalSortOnCycleDo3 [

	"This test case shows how to iteratively removing edges
	 belonging to a cycle to yield an acyclic relation."

	| aRelation m |
	m := 100.
	aRelation := self randomRelationOfSize: 1000 max: m.

	(1 to: m)
		topologicalSortByAssociations: aRelation
		acyclicDo: [ :ordering :edges | 
			self
				assert: ordering
				equals:
					#( 64 78 75 80 84 95 70 71 85 99 62 97 73 88 90 82 60 92 81 83 77
					   93 59 96 98 89 91 69 67 74 86 7 48 100 55 39 68 65 44 20 87 66
					   58 35 41 46 32 76 37 43 94 40 57 72 16 33 54 47 1 2 13 21 38
					   30 19 50 6 29 4 14 52 9 11 42 10 22 61 18 12 24 25 34 27 28 31
					   45 17 3 79 36 63 8 56 49 51 15 26 23 53 5 ).

			self assert_testTopologicalSortOnCycleDo3_edgesEqualsTo: edges ]
]
