{	"classes" : {		"ValueLink" : {			"hash" : 1174784,			"definition" : "Link subclass: #ValueLink\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"UndefinedObject" : {			"hash" : 786688,			"definition" : "Object subclass: #UndefinedObject\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."			],			"category" : "Kernel-Objects"		},		"Cons" : {			"hash" : 2465536,			"definition" : "Object subclass: #Cons\r\tinstanceVariableNames: 'car cdr'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Cons'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcar:\t\t<Object>",				"\tcdr:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Sequenceable-Cons"		},		"CTLinkedStorageValueLinkTest" : {			"hash" : 2479360,			"definition" : "TestCase subclass: #CTLinkedStorageValueLinkTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-LinkedStoragePool-Tests"		},		"GCoordinates" : {			"hash" : 5698560,			"definition" : "GeometryObject subclass: #GCoordinates\r\tinstanceVariableNames: 'coordinates'\r\tclassVariableNames: ''\r\tpackage: 'Geometry-Core'",			"comment" : [				"Description",				"--------------------",				"",				"I represent a set of coordinates that will be used by other geometric elements.",				"",				"My subclass will represent sets of a certain amount of coordinates. In the long terme we would like to remove all the subclasses and that everything manage myself as a n-dimensions coordinates set, but for now we prefer to begin with simple sets like 2D or 3D.",				"",				"I implement basic arithmetic that can be done with coordinates.",				"",				"Examples",				"--------------------",				"\t",				"\t\"Instance creation\"",				"\tGCoordinates withCollection: #(1 3). \t\"(1,3)\"",				"\t",				"\t#(1 3) asGCoordinates.\t\"(1,3)\"",				"\t",				"\t\"Arithmetic\"\t\t",				"\t(GCoordinates withCollection: #(1 3)) + (GCoordinates withCollection: #(5 1)). \t\"(6,4)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) - (GCoordinates withCollection: #(5 1)). \t\"(-4,2)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) * 2. \t\"(2,6)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) / 2. \t\"((1/2),(3/2))\"",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tcoordinates:\t\t<aCollection> \tA collection of all the coordinates I contains."			],			"category" : "Geometry-Core"		},		"LayoutCell" : {			"hash" : 2125568,			"definition" : "Object subclass: #LayoutCell\r\tinstanceVariableNames: 'target cellSize extraSpace flags nextCell'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-Layouts'",			"comment" : [				"I am used in table layouts to hold temporary values while the layout is being computed.",				"",				"Instance variables:",				"\ttarget \t\t<Morph>\t\tThe morph contained in this cell",				"\tcellSize \t\t<Point>\t\tThe size of the cell",				"\textraSpace \t<nil | Point>\tAdditional space to add after this cell",				"\tnextCell \t<nil | LayoutCell>\tThe next cell in the arrangement.",				"",				"Implementation note:",				"Both, cellSize and extraSpace contains points where",				"\tx - represents the primary table direction",				"\ty - represents the secondary table direction"			],			"category" : "Morphic-Base-Layouts"		},		"Collection" : {			"hash" : 849408,			"definition" : "Object subclass: #Collection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am the abstract superclass of all classes that represent a group of elements."			],			"category" : "Collections-Abstract-Base"		},		"SequenceableCollection" : {			"hash" : 855040,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		}	},	"messages" : {		"testSimpleValueLink" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"CTLinkedStorageValueLinkTest>>#test21ValueLinks",				"CTLinkedStorageValueLinkTest>>#testAsLinkedList"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testSimpleValueLink",						"",						"\t| l |",						"\tl := 1 ~~> nil.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 1 ~~> nil.",						"",						"^ self exportSlotsGraphOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3535830,					"argumentNames" : [ ]				}			}		},		"testAsValueLink" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testAsValueLink",						"",						"\t^ self exportSlotsGraphOf: (1 to: 10) asValueLink"					],					"body" : [						"^ self exportSlotsGraphOf: (1 to: 10) asValueLink"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273533,					"argumentNames" : [ ]				}			}		},		"testNilAsLinkedList" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testNilAsLinkedList",						"",						"\t^ self exportSlotsGraphOf: nil asLinkedList"					],					"body" : [						"^ self exportSlotsGraphOf: nil asLinkedList"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273314,					"argumentNames" : [ ]				}			}		},		"test43214ValueLinksFrom2Recursive" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test43214ValueLinksFrom2Recursive",						"",						"\t^ self exportSlotsGraphRecursiveOf:",						"\t\t  self test43214ValueLinksRecursive nextLink nextLink"					],					"body" : [						"^ self exportSlotsGraphRecursiveOf:",						"\t  self test43214ValueLinksRecursive nextLink nextLink"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273589,					"argumentNames" : [ ]				}			}		},		"testAsLinkedListFromInterval" : {			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testAsLinkedListFromInterval",						"",						"\t^ self exportSlotsGraphOf: ((1 to: 10) as: LinkedList)"					],					"body" : [						"^ self exportSlotsGraphOf: ((1 to: 10) as: LinkedList)"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273587,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			]		},		"test11ValueLinksLoopRecursive" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test11ValueLinksLoopRecursive",						"",						"\t^ self exportSlotsGraphRecursiveOf: self test11ValueLinksLoop"					],					"body" : [						"^ self exportSlotsGraphRecursiveOf: self test11ValueLinksLoop"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273311,					"argumentNames" : [ ]				}			}		},		"inject:into:" : {			"implementors" : {				"Cons" : {					"sourceCode" : [						"inject: init into: aBlock",						"",						"\t| accumulated |",						"\taccumulated := aBlock value: init value: car.",						"\t^ cdr ifCons: [ cdr inject: accumulated into: aBlock ] ifNotCons: [ ",						"\t\t  cdr",						"\t\t\t  ifNil: [ accumulated ]",						"\t\t\t  ifNotNil: [ aBlock value: accumulated value: cdr ] ]"					],					"body" : [						"| accumulated |",						"accumulated := aBlock value: init value: car.",						"^ cdr ifCons: [ cdr inject: accumulated into: aBlock ] ifNotCons: [ ",						"\t  cdr",						"\t\t  ifNil: [ accumulated ]",						"\t\t  ifNotNil: [ aBlock value: accumulated value: cdr ] ]"					],					"category" : "mapping",					"comment" : [ ],					"hash" : 37601403,					"argumentNames" : [						"init",						"aBlock"					]				},				"Collection" : {					"sourceCode" : [						"inject: thisValue into: binaryBlock",						"",						"\t\"Accumulate a running value associated with evaluating the argument, binaryBlock, with the current value of the argument, thisValue, and the receiver as block arguments.\"",						"",						"\t\"( #(1 2 3) inject: 0 into: [ :sum :each | sum + each ] ) >>> 6\"",						"",						"\t| nextValue |",						"\tnextValue := thisValue.",						"\tself do: [ :each | ",						"\t\tnextValue := binaryBlock value: nextValue value: each ].",						"\t^ nextValue"					],					"body" : [						"| nextValue |",						"nextValue := thisValue.",						"self do: [ :each | ",						"\tnextValue := binaryBlock value: nextValue value: each ].",						"^ nextValue"					],					"category" : "enumerating",					"comment" : [						"Accumulate a running value associated with evaluating the argument, binaryBlock, with the current value of the argument, thisValue, and the receiver as block arguments."					],					"hash" : 35985606,					"argumentNames" : [						"thisValue",						"binaryBlock"					]				},				"LayoutCell" : {					"sourceCode" : [						"inject: thisValue into: binaryBlock",						"",						"\t\"Accumulate a running value associated with evaluating the argument, ",						"\tbinaryBlock, with the current value of the argument, thisValue, and the ",						"\treceiver as block arguments. For instance, to sum the numeric elements ",						"\tof a collection, aCollection inject: 0 into: [:subTotal :next | subTotal + ",						"\tnext].\"",						"",						"\t| nextValue |",						"\tnextValue := thisValue.",						"\tself do: [ :each | ",						"\t\tnextValue := binaryBlock value: nextValue value: each ].",						"\t^ nextValue"					],					"body" : [						"| nextValue |",						"nextValue := thisValue.",						"self do: [ :each | ",						"\tnextValue := binaryBlock value: nextValue value: each ].",						"^ nextValue"					],					"category" : "collection",					"comment" : [						"Accumulate a running value associated with evaluating the argument, ",						"\tbinaryBlock, with the current value of the argument, thisValue, and the ",						"\treceiver as block arguments. For instance, to sum the numeric elements ",						"\tof a collection, aCollection inject: 0 into: [:subTotal :next | subTotal + ",						"\tnext]."					],					"hash" : 37261766,					"argumentNames" : [						"thisValue",						"binaryBlock"					]				},				"GCoordinates" : {					"sourceCode" : [						"inject: aSeed into: aBlock",						"",						"\t^ self coordinates inject: aSeed into: aBlock"					],					"body" : [						"^ self coordinates inject: aSeed into: aBlock"					],					"category" : "enumerating",					"comment" : [ ],					"hash" : 40571301,					"argumentNames" : [						"aSeed",						"aBlock"					]				}			},			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"BinomialHeapTest>>#testPushAndPop",				"BlockClosuresTestCase>>#testGpsExample1",				"BlockClosuresTestCase>>#nestedLoopsExample:",				"BlockClosuresTestCase>>#testGpsExample2",				"CTLinkedStorageValueLinkTest>>#testAsValueLinkInjectInto",				"ClassDescription>>#linesOfCode",				"ClassDescription>>#classesThatImplementAllOf:",				"ClassOrganization>>#ownCategories",				"Collection>>#max",				"Collection>>#sum",				"Collection>>#sum:ifEmpty:",				"Collection>>#maxValue:",				"Collection>>#sumNumbers:",				"Collection>>#sumNumbers",				"Collection>>#stdev",				"Collection>>#min",				"CollectionRootTest>>#testInjectInto",				"Cons>>#inject:into:",				"DADependentPackageWrapper>>#extensionDependenciesSize",				"DADependentPackageWrapper>>#dependenciesSize",				"DAPackage>>#dependentPackages",				"DAPackage>>#extensionDependenciesSize",				"DAPackage>>#dependenciesSize",				"DAPackageRelationGraph>>#outgoing",				"DTTestsProfilingResult>>#buildTreeNode",				"DebugSession class>>#debuggingActionsForPragmas:for:",				"DebugSession class>>#debuggingActionsForPragma:for:",				"Dictionary class>>#newFromAssociations:",				"DynamicPresentersListBuilder>>#instVarNamesAndPresenterNamesArray",				"DynamicPresentersListBuilder>>#nullPresentersInstVarNamesAndPresenterNamesArray",				"ExceptionTester>>#contents",				"FFIEnumeration class>>#enumNameSuffix:",				"FFIExternalStructureFieldSpec>>#compileSpec",				"FLClusterization>>#objectCount",				"FTBasicTreeListDataSource>>#countAvailableRows",				"FTBasicTreeListItem>>#availableRows",				"FontChooserMorph>>#widthRequiredFor:from:noLessThan:",				"FontTest>>#testParagraph",				"FontTest>>#testDisplay",				"FreeTypeSettings>>#subPixelFiltersFromRatios:",				"GCoordinates>>#inject:into:",				"GLMApproximateScrollbarBrick>>#approximateBandHeight",				"GLMCustomCell>>#childrenCount",				"GLMHorizontalLinearLayout>>#widthParentDependency:",				"GLMLinearLayout>>#layout:in:inject:into:",				"GLMMorphicTabulatorRenderer>>#renderCustomColumn:ofPane:inUI:inBrowser:",				"GLMMorphicTabulatorRenderer>>#renderCustomRow:ofPane:inUI:inBrowser:",				"GLMVerticalLinearLayout>>#heightParentDependency:",				"GTRawObjectVariablesBrowser>>#generateHashFor:",				"GTSUnitExampleFailingTest>>#testDictionary",				"GTSpotterStackedLayout>>#layoutProportional:in:position:",				"GTriangle>>#area",				"GVector>>#length",				"HEAbstractExported>>#hash",				"IRBytecodeGenerator>>#closureFrom:to:copyNumCopiedValues:numArgs:",				"IRBytecodeGenerator>>#from:if:goto:otherwise:",				"IRBytecodeGenerator>>#updateJumpOffsets",				"IRBytecodeGenerator>>#from:goto:",				"IceLibgitTreeBuilder>>#entryByPath:",				"IcePluginManager>>#checkoutBranchPanelsOnModel:",				"IceTipTreeSelectingDataSource>>#withAllChildrenOf:",				"Integer>>#digitSum",				"IntegerTest>>#testBitAt",				"KMCatcherMorph>>#shortcut",				"KMShortcutPrinter>>#visitMacOS:",				"LargePositiveIntegerTest>>#x13kbits",				"LargePositiveIntegerTest>>#x92kbits",				"LargePositiveIntegerTest>>#x23kbits",				"LargePositiveIntegerTest>>#x106kbits",				"LinkedListTest>>#testInjectInto",				"MCServerRegistry>>#repositoryAt:credentialsDo:",				"MCWorkingCopyBrowser>>#collectConfigurationMenuSpecs",				"MailMessage>>#atomicParts",				"MalDisjointSets>>#run",				"MalHits>>#computeAuthoritiesFor:",				"MalHits>>#normalize:",				"MalHits>>#computeHubsFor:",				"MalWeightedHits>>#computeAuthoritiesFor:",				"MalWeightedHits>>#computeHubsFor:",				"MessageTally>>#localTime",				"MessageTally>>#localTally",				"MorphicLabelAdapter>>#emphasisCodeFor:",				"MultiFontTest>>#testMultistringFont",				"OCArrayLiteralTest>>#testByteArrayLong",				"Object>>#asSlotsGroupKnownReferences:",				"RBAccessorClassRefactoring>>#preconditions",				"RBAddClassRefactoring>>#preconditions",				"RBAddClassTransformation>>#preconditions",				"RBBasicDummyLintRuleTest class>>#variableReferencedOnce",				"RBBasicDummyLintRuleTest class>>#longMethods",				"RBBasicDummyLintRuleTest class>>#variableAssignedLiteral",				"RBCategoryEnvironment>>#classNames",				"RBChangeMethodNameRefactoring>>#preconditions",				"RBChildrenToSiblingsRefactoring>>#preconditions",				"RBClassEnvironment>>#includesCategory:",				"RBClassEnvironment>>#metaClassSelectorDictionary",				"RBClassEnvironment>>#classSelectorDictionary",				"RBCompositeLintRule>>#problemCount",				"RBCompositeLintRuleTestData>>#problemCount",				"RBCompositeLintRuleTestData>>#failedRules",				"RBCompositeRefactoryChange>>#changesSize",				"RBDummyCompositeLintRuleTest>>#problemCount",				"RBDummyCompositeLintRuleTest>>#failedRules",				"RBDummyRefactoryTestDataApp>>#foo:",				"RBDummyRefactoryTestDataApp>>#caller2",				"RBGenerateEqualHashRefactoring>>#preconditions",				"RBGeneratePrintStringRefactoring>>#preconditions",				"RBMethodNode>>#conceptualArgumentSize",				"RBMethodNode>>#reformatSource",				"RBProgramNode>>#sentMessages",				"RBProgramNode>>#allStatements",				"RBProgramNode>>#allTemporaryVariables",				"RBProgramNode>>#allArgumentVariables",				"RBProgramNode>>#allDefinedVariables",				"RBProtocolEnvironment>>#includesCategory:",				"RBPullUpMethodRefactoring>>#preconditions",				"RBPullUpMethodTest>>#testPullUpWhenSuperClassDoesNotDirectlyImplement",				"RBPushDownMethodRefactoring>>#preconditions",				"RBRefactoringTest>>#abstractVariableTestData",				"RBRefactoryTestDataApp>>#caller2",				"RBRefactoryTestDataApp>>#foo:",				"RBRefactoryTyper>>#findTypeFor:",				"RBRefactoryTyper>>#processCollectionMessagesFor:in:",				"RBRegexRefactoring>>#execute:",				"RBRemoveClassKeepingSubclassesRefactoring>>#preconditions",				"RBRemoveClassRefactoring>>#preconditions",				"RBRemoveClassTransformation>>#preconditions",				"RBRemoveHierarchyMethodRefactoring>>#preconditions",				"RBRemoveMethodRefactoring>>#preconditions",				"RBRemoveParameterRefactoring>>#myConditions",				"RBTransformationTest>>#abstractVariableTestData",				"RBVariableEnvironment>>#numberVariables",				"RGPackageDefinition>>#numberOfLinesOfCode",				"RPackage>>#linesOfCode",				"RPackageSet>>#categoryNames",				"RSAbstractGraphLayout>>#maximumRadius:",				"RSAbstractGraphLayout>>#maximumDiameter:",				"RSAbstractHorizontalTreeLayout>>#rearrangeByLayers:",				"RSAbstractTreeBuilder>>#weightFromChildren:block:",				"RSAbstractVerticalTreeLayout>>#rearrangeByLayers:",				"RSAlignment>>#leftMostShape",				"RSAlignment>>#bottomMostShape",				"RSAlignment>>#rightMostShape",				"RSAlignment>>#topMostShape",				"RSAlignment>>#centerMostShape",				"RSKeyNavigationCanvas>>#processKeyDown:",				"RSLayoutExamples>>#example05LayoutBasicWithColorFading",				"RSRadialTreeLayout>>#moveAllElementsToTopLeft:",				"RSRectanglePackLayout>>#doExecute:",				"RSRectanglePackLayout>>#recalculateFreeSpacesWith:",				"RSResize>>#biggestShape",				"RSResize>>#biggestExtent",				"RSResize>>#widestShape",				"RSResize>>#highestShape",				"RSSugiyamaLayout>>#layoutAt:",				"ReMissingMethodCritique>>#methodHeader",				"ReleaseTest>>#testWorldMenuHasHelpForAllEntries",				"RowLayout>>#layout:in:",				"RubTextEditor>>#inOutdent:delta:",				"RunArrayTest>>#testRunArrayInvariant",				"SBRALTest>>#testIncrement",				"SBRALTest>>#testSorted",				"SequenceableCollection>>#horner:init:",				"Set>>#max:",				"SpExecutableLayout>>#deepPresenters",				"SpMorphStyle>>#propertiesLike:",				"SpMorphStyle>>#calculateMergedProperties",				"SpStyleClass>>#flattenClasses",				"SpStyleClass>>#flattenProperties",				"StInspectionCollector>>#collectInspectionContexts",				"StSizeReporter>>#computeLocs",				"StSizeReporter>>#reportSmartInfo:",				"StrikeFontSet>>#characters:in:displayAt:clippedBy:rule:fillColor:kernDelta:on:",				"StrikeFontSet>>#initializeWithFontArray:",				"String>>#findAnySubstring:startingAt:",				"String>>#asFourCode",				"SystemProgressMorph>>#maxBarWidth",				"SystemWindow>>#reframePanesAdjoining:along:to:",				"TIterateTest>>#testInjectInto",				"TKTFuture class>>#reduceCollectionOfFutures:with:",				"TaSequence>>#aliasSelector:",				"TabGroupMorph>>#minExtent",				"TableLayout>>#computeExtraSpacing:in:horizontal:target:",				"TableLayout>>#computeCellArrangement:in:horizontal:target:",				"TableLayout>>#computeGlobalCellArrangement:in:horizontal:wrap:spacing:",				"TestCase class>>#buildSuiteFromMethods:",				"TestCase class>>#localCoverageForClass:",				"TestCase class>>#shouldGenerateLastStoredRunMethod",				"TestCase class>>#coverageForClass:until:",				"TestSuite>>#defaultResources",				"Text>>#emphasisAt:",				"TextEditor>>#inOutdent:delta:",				"TimeMeasuringTest>>#versionInfoForWorkingCopiesThat:",				"ToggleMenuItemShortcutWithSymbol>>#text",				"ToggleMenuItemShortcutWithSymbol>>#drawOnAthensCanvas:",				"TonelWriter>>#selectorIsComplete:in:",				"Unicode class>>#initializeTagConstants",				"ZdcByteArrayManager>>#totalSize",				"ZipArchive>>#extractAllTo:informing:overwrite:",				"ZipArchiveMember>>#extractInDirectory:informingOverwrite:onSuccess:onRetryWithOverwrite:onFailedOverwrite:onAbortOverwrite:",				"ZnCharacterEncoder>>#encodedByteCountForCodePoints:",				"ZnCharacterEncoder>>#encodedByteCountForString:",				"ZnMultiThreadedServer>>#exceptionSet:",				"ZnStaticFileServerDelegate>>#actualFilenameFor:",				"ZnUrl>>#hash"			]		},		"test4321ValueLinksSimplerRepr" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test4321ValueLinksSimplerRepr",						"",						"\t^ self",						"\t\t  export: self test4321ValueLinks",						"\t\t  pathSuffix: ''",						"\t\t  selector: #gtInspectorLinksUsingCanvas:"					],					"body" : [						"^ self",						"\t  export: self test4321ValueLinks",						"\t  pathSuffix: ''",						"\t  selector: #gtInspectorLinksUsingCanvas:"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273531,					"argumentNames" : [ ]				}			}		},		"asValueLink" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"BinomialHeap>>#pop",				"BitArray class>>#booleans:",				"CTLinkedStorageValueLinkTest>>#testAsValueLink",				"SequenceableCollection>>#asLinkedList"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"asValueLink",						"",						"\t^ self foldr: #~~> init: nil"					],					"body" : [						"^ self foldr: #~~> init: nil"					],					"category" : "*Collections-Sequenceable-Extensions",					"comment" : [ ],					"hash" : 1648914,					"argumentNames" : [ ]				}			}		},		"test4321ValueLinks" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"CTLinkedStorageValueLinkTest>>#testAsLinkedList4321",				"CTLinkedStorageValueLinkTest>>#test4321ValueLinksRecursive",				"CTLinkedStorageValueLinkTest>>#test4321ValueLinksSimplerRepr"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test4321ValueLinks",						"",						"\t| l |",						"\tl := 4 ~~> self test321ValueLinks.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 4 ~~> self test321ValueLinks.",						"",						"^ self exportSlotsGraphOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3798092,					"argumentNames" : [ ]				}			}		},		"test43214ValueLinksRecursive" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"CTLinkedStorageValueLinkTest>>#test43214ValueLinksFrom2Recursive"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test43214ValueLinksRecursive",						"",						"\t| l1 l |",						"\tl1 := 1 ~~> nil.",						"\tl := 4 ~~> (3 ~~> (2 ~~> l1)).",						"\tl1 nextLink: l.",						"",						"\t^ self exportSlotsGraphRecursiveOf: l"					],					"body" : [						"| l1 l |",						"l1 := 1 ~~> nil.",						"l := 4 ~~> (3 ~~> (2 ~~> l1)).",						"l1 nextLink: l.",						"",						"^ self exportSlotsGraphRecursiveOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3799359,					"argumentNames" : [ ]				}			}		},		"testAsValueLinkInjectInto" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testAsValueLinkInjectInto",						"",						"\t| l |",						"\tl := (1 to: 10)",						"\t\t     inject: nil",						"\t\t     into: [ :aValueLink :each | each ~~> aValueLink ].",						"\t^ self exportSlotsGraphRecursiveOf: l"					],					"body" : [						"| l |",						"l := (1 to: 10)",						"\t     inject: nil",						"\t     into: [ :aValueLink :each | each ~~> aValueLink ].",						"^ self exportSlotsGraphRecursiveOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3536336,					"argumentNames" : [ ]				}			}		},		"test321ValueLinks" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"CTLinkedStorageValueLinkTest>>#test4321ValueLinks"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test321ValueLinks",						"",						"\t| l |",						"\tl := 3 ~~> self test21ValueLinks.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 3 ~~> self test21ValueLinks.",						"",						"^ self exportSlotsGraphOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3535946,					"argumentNames" : [ ]				}			}		},		"foldr:init:" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"BinomialTree>>#edges:",				"Cons class>>#fromSequenceableCollection:lastCdr:",				"SequenceableCollection>>#foldr1:",				"SequenceableCollection>>#asValueLink",				"UnionFind>>#size"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"foldr: aBlock init: init",						"",						"\t| cell |",						"\tcell := init.",						"\tself reverseDo: [ :each | cell := aBlock value: each value: cell ].",						"\t^ cell"					],					"body" : [						"| cell |",						"cell := init.",						"self reverseDo: [ :each | cell := aBlock value: each value: cell ].",						"^ cell"					],					"category" : "*Collections-Sequenceable-Extensions",					"comment" : [ ],					"hash" : 35991277,					"argumentNames" : [						"aBlock",						"init"					]				}			}		},		"asLinkedList" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptLinkMessagesForDoc",				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"BinomialHeap>>#gtInspectorTreesInCanvas:",				"BinomialTree>>#edges:",				"BinomialTree>>#gtInspectorTreeViewUsingCanvas:",				"BinomialTree>>#asRecursiveSlotsInGroup:knownReferencesSet:",				"BinomialTree>>#nodes",				"BitArray>>#bitPositions",				"CTLinkedStorageValueLinkTest>>#testAsLinkedList4321",				"CTLinkedStorageValueLinkTest>>#testNilAsLinkedList",				"CTLinkedStorageValueLinkTest>>#testAsLinkedList",				"Cons>>#asLinkedList",				"SBRAL>>#gtInspectorTreesInCanvas:",				"SBRALBinaryTree>>#gtInspectorTreeViewUsingCanvas:",				"SequenceableCollection>>#asLinkedList",				"ValueLink>>#gtInspectorLinksUsingCanvas:"			],			"implementors" : {				"UndefinedObject" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ LinkedList empty"					],					"body" : [						"^ LinkedList empty"					],					"category" : "*Kernel-Extensions",					"comment" : [ ],					"hash" : 1580357,					"argumentNames" : [ ]				},				"Cons" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ (cdr ifNil: [ LinkedList new ] ifNotNil: [ cdr asLinkedList ])",						"\t\t  addFirst: (car class = self class",						"\t\t\t\t   ifTrue: [ car asLinkedList ]",						"\t\t\t\t   ifFalse: [ car ]);",						"\t\t  yourself"					],					"body" : [						"^ (cdr ifNil: [ LinkedList new ] ifNotNil: [ cdr asLinkedList ])",						"\t  addFirst: (car class = self class",						"\t\t\t   ifTrue: [ car asLinkedList ]",						"\t\t\t   ifFalse: [ car ]);",						"\t  yourself"					],					"category" : "converting",					"comment" : [ ],					"hash" : 3261520,					"argumentNames" : [ ]				},				"SequenceableCollection" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ self asValueLink asLinkedList"					],					"body" : [						"^ self asValueLink asLinkedList"					],					"category" : "*Collections-Sequenceable-Extensions",					"comment" : [ ],					"hash" : 1648898,					"argumentNames" : [ ]				},				"ValueLink" : {					"sourceCode" : [						"asLinkedList",						"",						"\t| list |",						"\tlist := LinkedList empty.",						"\tself do: [ :each | list addLast: each value ].",						"\t^ list"					],					"body" : [						"| list |",						"list := LinkedList empty.",						"self do: [ :each | list addLast: each value ].",						"^ list"					],					"category" : "*Collections-Support-Extensions",					"comment" : [ ],					"hash" : 2231626,					"argumentNames" : [ ]				}			}		},		"testAsLinkedList4321" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testAsLinkedList4321",						"",						"\t^ self exportSlotsGraphOf: self test4321ValueLinks asLinkedList"					],					"body" : [						"^ self exportSlotsGraphOf: self test4321ValueLinks asLinkedList"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273459,					"argumentNames" : [ ]				}			}		},		"~~>" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"BinomialHeap>>#min:",				"BinomialHeap>>#associations:",				"BinomialHeap>>#pushTree:onTrees:",				"BinomialHeap>>#merge:with:",				"BinomialTree>>#edges:",				"BinomialTree>>#edges",				"BinomialTree>>#linkBinomialTree:",				"BitArray>>#extractBits:byte:valueLink:",				"CTLinkedStorageValueLinkTest>>#test43214ValueLinksRecursive",				"CTLinkedStorageValueLinkTest>>#test321ValueLinks",				"CTLinkedStorageValueLinkTest>>#test21ValueLinks",				"CTLinkedStorageValueLinkTest>>#testAsValueLinkInjectInto",				"CTLinkedStorageValueLinkTest>>#testSimpleValueLink",				"CTLinkedStorageValueLinkTest>>#test4321ValueLinks",				"CTLinkedStorageValueLinkTest>>#test11ValueLinksLoop",				"ContinuationTest>>#remove:oneStar:sentinel:continuation:",				"ContinuationTest>>#testLeftmost",				"ContinuationTest>>#intersectValueLink:withCollection:",				"ContinuationTest>>#remove:uptoLastValueLink:continuation:",				"ContinuationTest>>#testRemoveOneStar",				"ContinuationTest>>#remove:oneStarWithTry:continuation:",				"ContinuationTest>>#testTwoInARow",				"Integer>>#skewBinaryCanonicalSparseRepresentation",				"Integer>>#binaryCanonicalDenseRepresentation",				"Integer>>#skewBinaryCanonicalDenseRepresentation",				"Integer>>#skewBinaryCanonicalDenseRepresentationWeight:",				"Integer>>#binaryCanonicalDenseRepresentationWith:",				"Queue>>#add:",				"SBRAL>>#associations",				"SBRALBinaryTreeLeaf>>#edges",				"SBRALBinaryTreeNode>>#edges:",				"SequenceableCollection>>#asValueLink",				"SkewBinaryCanonicalNumber>>#gtInspectorSkewDenseRepresentationInCanvas:",				"SkewBinaryCanonicalNumber>>#cons:onto:",				"SkewBinaryCanonicalNumberTest>>#testIncrement",				"SkewBinaryCanonicalNumberUnaryFunctionDecrement>>#decrementBitZeroOrTwo:by:onto:",				"ValueLink>>#edges:parent:",				"ValueLink>>#reversed:"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"~~> aValueLinkOrNil",						"",						"\t\"Answer a ValueLink between self and aValueLinkOrNil.",						"\tThis message allows the receiver to be inserted in a chain of objects, terminated by nil.\"",						"",						"\t\"Code of ValueLink>>#nextLink: and ValueLink>>#value: are inline here for speed.\"",						"",						"\t\"(1 ~~> nil) = ValueLink new value: 1\"",						"",						"\t\"(1 ~~> 'one') value >>> 1\"",						"",						"\t\"(1 ~~> nil) nextLink >>> nil\"",						"",						"\t\"Note that `value` can be ANY object; on the other hand, `nextLink` should be either another ",						"\tValueLink object or nil.\"",						"",						"\t^ ValueLink basicNew",						"\t\t  value: self;",						"\t\t  nextLink: aValueLinkOrNil;",						"\t\t  yourself"					],					"body" : [						"^ ValueLink basicNew",						"\t  value: self;",						"\t  nextLink: aValueLinkOrNil;",						"\t  yourself"					],					"category" : "associating",					"comment" : [						"Answer a ValueLink between self and aValueLinkOrNil.",						"\tThis message allows the receiver to be inserted in a chain of objects, terminated by nil."					],					"hash" : 18638817,					"argumentNames" : [						"aValueLinkOrNil"					]				}			}		},		"testAsLinkedList" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"testAsLinkedList",						"",						"\t^ self exportSlotsGraphOf: self testSimpleValueLink asLinkedList"					],					"body" : [						"^ self exportSlotsGraphOf: self testSimpleValueLink asLinkedList"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3273459,					"argumentNames" : [ ]				}			}		},		"test11ValueLinksLoop" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"CTLinkedStorageValueLinkTest>>#test11ValueLinksLoopRecursive"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test11ValueLinksLoop",						"",						"\t| l |",						"\tl := 1 ~~> nil.",						"\tl nextLink: l.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 1 ~~> nil.",						"l nextLink: l.",						"",						"^ self exportSlotsGraphOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3536341,					"argumentNames" : [ ]				}			}		},		"test21ValueLinks" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc",				"CTLinkedStorageValueLinkTest>>#test321ValueLinks"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test21ValueLinks",						"",						"\t| l |",						"\tl := 2 ~~> self testSimpleValueLink.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 2 ~~> self testSimpleValueLink.",						"",						"^ self exportSlotsGraphOf: l"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3535946,					"argumentNames" : [ ]				}			}		},		"test4321ValueLinksRecursive" : {			"senders" : [				"BaselineOfContainersLinkedStoragePool>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinkedStorageValueLinkTest" : {					"sourceCode" : [						"test4321ValueLinksRecursive",						"",						"\t^ self exportSlotsGraphRecursiveOf: self test4321ValueLinks"					],					"body" : [						"^ self exportSlotsGraphRecursiveOf: self test4321ValueLinks"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3535455,					"argumentNames" : [ ]				}			}		}	}}